@page "/portal/add"
@page "/portal/edit/{portalId}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Spectrum.Shared
@attribute [Authorize]


<h1>@Title Portal</h1>
<hr />
<EditForm Model="@portal" OnValidSubmit="SavePortal">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="portal!.Name" />
        </div>
        <ValidationMessage For="@(() => portal.Name)" />
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Address</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="portal.PortalAddress" />
        </div>
        <ValidationMessage For="@(() => portal.PortalAddress)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public string portalId { get; set; }
    protected string Title = "Add";
    protected SpectrumPortal? portal = new();
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(portalId))
        {
            applicationUser = await LoadApplicationUser();
            portal = applicationUser.SpectrumPortal.First(x => x.Id == portalId);
            //portal = await Http.GetFromJsonAsync<SpectrumPortal>("api/portal/" + portalId);
            Title = "Edit " + portal.Name;

        }
    }
    protected async Task SavePortal()
    {
        if (!string.IsNullOrWhiteSpace(portal!.Id))
        {
            await Http.PutAsJsonAsync("api/portal", portal);
        }
        else
        {
            await Http.PostAsJsonAsync("api/portal", portal);
        }
        Cancel();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/portal");
    }

    protected ApplicationUser applicationUser = new();

    async Task<ApplicationUser> LoadApplicationUser()
    {
        var applicationUser = new ApplicationUser();
        try
        {
            applicationUser = await Http.GetFromJsonAsync<ApplicationUser>("/api/portal");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        return applicationUser!;
    }
}