@page "/portal/add"
@page "/portal/edit/{portalAddr}"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Spectrum.Shared
@attribute [Authorize]
@inject PortalState PortalState
@inject PortalClient PortalClient


<h1>@Title Portal</h1>
<hr />
@if (PortalState.ApplicationUser == null || PortalState.SelectedPortal == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@PortalState.SelectedPortal" OnValidSubmit="SavePortal">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="Name" class="form-label">Name</label>
            <div class="col-md-4">
                <InputText class="form-control" @bind-Value="@PortalState.SelectedPortal!.Name" />
            </div>
            <ValidationMessage For="@(() => @PortalState.SelectedPortal.Name)" />
        </div>
        <div class="mb-3">
            <label for="Address" class="form-label">Address</label>
            <div class="col-md-4">
                <InputText class="form-control" @bind-Value="@PortalState.SelectedPortal.PortalAddress" />
            </div>
            <ValidationMessage For="@(() => @PortalState.SelectedPortal.PortalAddress)" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Save</button>
            <button class="btn btn-light" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
}
@code {
    [Parameter]
    public string? portalAddr { get; set; }
    public string Title { get; set; } = string.Empty;
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(portalAddr))
        {
            if (PortalState.SelectedPortal == null)
            {
                PortalState.LoadUser(await LoadApplicationUser());
                PortalState.SetSelectedPortal(portalAddr!);
            }
            Title = "Edit " + PortalState.SelectedPortal!.Name;

        }
        else
        {
            PortalState.SelectedPortal = new SpectrumPortal();
        }
    }
    protected async Task SavePortal()
    {
        if (!string.IsNullOrWhiteSpace(portalAddr))
        {
            await PortalClient.UpdatePortal(PortalState.SelectedPortal!);
        }
        else
        {
            PortalState.AddPortal(await PortalClient.AddPortal(PortalState.SelectedPortal!));
        }
        Cancel();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/portal");
    }

    protected async Task<ApplicationUser> LoadApplicationUser()
    {
        ApplicationUser? au = new ApplicationUser();
        try
        {
            au = await PortalClient.GetUserAndPortals();
            return au ?? new ApplicationUser();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        return au!;
    }

}