@page "/portal"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Spectrum.Shared
@attribute [Authorize]
@inject PortalState PortalState
@inject PortalClient PortalClient
@inject NavigationManager NavigationManager

@if (PortalState.ApplicationUser == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Greetings: @PortalState.ApplicationUser.UserName</h1>
    <div class="row">
        <div class="col-md-6">
            <a href='/portal/add' class="btn btn-primary" role="button">
                <i class="fas fa-user-plus"></i>
                Add Portal
            </a>
        </div>
        <div class="input-group col">
            <input type="text" class="form-control" placeholder="Search Portal by name"
               @bind="PortalState.SearchString" @onchange="PortalState.ResetSearch" 
               @bind:event="oninput" @onkeyup="PortalState.FilterPortal" />
            @if (PortalState.SearchString.Length > 0)
            {
                <div class="input-group-append">
                    <button class="btn btn-danger" @onclick="PortalState.ResetSearch">
                        Clear
                    </button>
                </div>
            }

        </div>
    
    </div>
    <br />
    @if (PortalState.ApplicationUser.SpectrumPortal == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table table-dark align-middle table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Address</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (portal, index) in PortalState.SearchPortalData
               .Select((portal, i) => (portal, i)))
                {
                    <tr>
                        <td>@index</td>
                        <td>@portal.Name</td>
                        <td>@portal.PortalAddress</td>
                        <td>
                            <button @onclick="() => Manage(portal.PortalAddress)" class="btn btn-outline-success" role="button">
                                Manage
                            </button>
                            <button @onclick="() => Edit(portal.PortalAddress)" class="btn btn-outline-warning" role="button">
                                Edit
                            </button>
                            <button @onclick="() => Delete(portal.PortalAddress)" class="btn btn-outline-danger" role="button">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    }
}
@code {

    protected override async Task OnInitializedAsync()
    {
        PortalState.LoadUser(await LoadApplicationUser());
    }

    protected async Task<ApplicationUser> LoadApplicationUser()
    {
        ApplicationUser? au = new ApplicationUser();
        try
        {
            au = await PortalClient.GetUserAndPortals();
            return au ?? new ApplicationUser();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        return au!;
    }

    private void Delete(string portalAddr)
    {
        PortalState.SetSelectedPortal(portalAddr);
        NavigationManager.NavigateTo("/portal/delete/" + portalAddr);
    }
    private void Edit(string portalAddr)
    {
        PortalState.SetSelectedPortal(portalAddr);
        NavigationManager.NavigateTo("/portal/edit/" + portalAddr);
    }
    private void Manage(string portalAddr)
    {
        PortalState.SetSelectedPortal(portalAddr);
        NavigationManager.NavigateTo("/portal/manage/" + portalAddr);
    }

}