@using System.Web
@*@using Spectrum.Shared.Services.Email

@inject IEmailService EmailService*@
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Spectrum.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject PortalState PortalState

<div>
    <div class="property-card mx-auto">
        <div class="property-image">
            <div class="property-image-title">
                <h5> Caller ID: @Mission!.Name </h5>
                <p>Status: @Mission.Status</p>
                <p>Order Time: @Mission.StartTime</p>
                <p>Web notification subscribed</p>

                <input placeholder="Input your email" @bind="emailAddress" />
                <button class="btn-email" @onclick="SubEmail" disabled="@sendBtn">Subscribe</button>

            </div>
        </div>
 @*       <div class="property-description">
            <h5> Caller ID: @Mission.Name </h5>
            <span>Status: @Mission.Status</span>
            <p>Order Time: @Mission.StartTime</p>

        </div>*@
        <a @onclick="ExitMission">
            <div class="property-social-icons">
                <span class="oi oi-x"></span>
            </div>
        </a>
    </div>
</div>

@code {
    private bool sendBtn = false;
    private string sendMsg = "Send Mail";
    [Parameter]
    public Mission? Mission { get; set; }
    [Parameter]
    public EventCallback<Mission> MissionChanged { get; set; }
    private string emailAddress = "";
    //private async void SendMail()
    //{
    //    if (EmailService.IsValidEmail(emailAddress))
    //    {
    //        await EmailService.SendEmailAsync("wwjweiwenjie@gmail.com", "Hello From Spectrum",
    //        new EventModel { Id = 1, Subject = "Testing", StartTime = DateTime.Now, EndTime = DateTime.Now, EmployeeId = 1 });
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {
        // In the background, ask if they want to be notified about order updates
        _ = RequestNotificationSubscriptionAsync();
        applicationUser = await LoadApplicationUser();
    }
    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null)
        {
            try
            {
                var response = await Http.PutAsJsonAsync("notifications/subscribe", subscription);
                response.EnsureSuccessStatusCode();

            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }

    private ApplicationUser? applicationUser;
    async Task<ApplicationUser> LoadApplicationUser()
    {
        var applicationUser = new ApplicationUser();
        try
        {
            applicationUser = await Http.GetFromJsonAsync<ApplicationUser>("/api/portal");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        return applicationUser!;
    }

    public async Task CreatePortal()
    {
        var response = await Http.GetAsync("/notifications/send");
        response.EnsureSuccessStatusCode();
    }

    public async Task SubEmail()
    {
        sendBtn = true;
        sendMsg = "Subscribed";
        var response = await Http.PostAsJsonAsync("/notifications/email", new Order()
        {
            Id = Guid.NewGuid().ToString(),
            ApplicationUserId = applicationUser!.Id,
            MissionUUID = Mission!.UUID,
            Done = false,
            Email = emailAddress

        });
        response.EnsureSuccessStatusCode();
    }


    private void ExitMission()
    {
        Mission = null;
        MissionChanged.InvokeAsync(Mission);
        PortalState.SelectedMission = null;
        PortalState.CallRequestRefresh();
    }

}